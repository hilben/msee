<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>at.sti2.msee.frontend</groupId>
	<!-- notice how we specify the packaging to be a war, that way, maven knows 
		where to copy the jar files -->
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<artifactId>mseewebsite</artifactId>
	<name>MSEE Website</name>

	<parent>
		<groupId>at.sti2.msee</groupId>
		<artifactId>sesa-project</artifactId>
		<version>1.2-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<build>
		<finalName>msee</finalName>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>tomcat-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-java2ws-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
			</plugin>
			<!-- uncommented due to slow precomiling -->
			<!-- 
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.7</version>

                <executions>
                    <execution>
                        <id>precompile-assets</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target name="Precompile assets">
                                <exec executable="sh" dir="${project.basedir}" failonerror="true">
                                    <arg value="-c" />
                                    <arg value="bundle exec rake assets:precompile" /> 
                                </exec>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- This tasks only creates a basic structure expected by maven, so 
							it can do its work -->
						<id>create-mock-web-descriptor</id>
						<phase>compile</phase>
						<configuration>
							<executable>/bin/sh</executable>
							<workingDirectory>.</workingDirectory>
							<arguments>
								<argument>-c</argument>
								<argument>
									mkdir -p src/main/webapp/WEB-INF
									touch src/main/webapp/WEB-INF/web.xml
								</argument>
							</arguments>
						</configuration>
						<goals>
							<goal>exec</goal>
						</goals>
					</execution>
					<execution>
						<!-- Now in the package phase we copy the jar files that maven put 
							into the fake web app to our rails' lib folder -->
						<id>copy-needed-jars-into-lib</id>
						<phase>package</phase>
						<configuration>
							<executable>/bin/sh</executable>
							<workingDirectory>.</workingDirectory>
							<arguments>
								<argument>-c</argument>
								<argument>
									rm -f lib/*.jar
									cp target/railsApp/WEB-INF/lib/*.jar lib
									rm -rf target/railsApp*
									rm -rf src
								</argument>
							</arguments>
						</configuration>
						<goals>
							<goal>exec</goal>
						</goals>
					</execution>
					<execution>
						<!-- Here we optionally create the final war file containing our rails 
							app using warbler, doing a small cleanup of the files and folders maven created -->
						<id>create-final-war</id>
						<phase>package</phase>
						<configuration>
							<executable>/bin/sh</executable>
							<workingDirectory>.</workingDirectory>
							<arguments>
								<argument>-c</argument>
								<argument>
									rm -rf *.war tmp/war
									jruby -S warble
									mv *.war target/msee.war
								</argument>
							</arguments>
						</configuration>
						<goals>
							<goal>exec</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
