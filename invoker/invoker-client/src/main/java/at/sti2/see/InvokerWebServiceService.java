/**
 * Copyright (C) 2011 STI Innsbruck, UIBK
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */
package at.sti2.see;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "InvokerWebServiceService", targetNamespace = "http://sesa.sti2.at/services/", wsdlLocation = "http://localhost:9090/invoker-webservice/services/invoker?wsdl")
public class InvokerWebServiceService
    extends Service
{

	private static final String NAMESPACE = "http://sesa.sti2.at/services/";
//	private static final String NAMESPACE = "http://see.sti2.at"; //old?
	
    private final static URL INVOKERWEBSERVICESERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(at.sti2.see.InvokerWebServiceService.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = at.sti2.see.InvokerWebServiceService.class.getResource(".");
            url = new URL(baseUrl, "http://localhost:9090/invoker-webservice/services/invoker?wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'http://localhost:9090/invoker-webservice/services/invoker?wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        INVOKERWEBSERVICESERVICE_WSDL_LOCATION = url;
    }

    public InvokerWebServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public InvokerWebServiceService() {
    
    	super(INVOKERWEBSERVICESERVICE_WSDL_LOCATION, new QName(NAMESPACE, "InvokerWebServiceService"));
    }

    /**
     * 
     * @return
     *     returns InvokerWebService
     */
    @WebEndpoint(name = "InvokerWebServicePort")
    public InvokerWebService getInvokerWebServicePort() {
        return super.getPort(new QName(NAMESPACE, "InvokerWebServicePort"), InvokerWebService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns InvokerWebService
     */
    @WebEndpoint(name = "InvokerWebServicePort")
    public InvokerWebService getInvokerWebServicePort(WebServiceFeature... features) {
        return super.getPort(new QName(NAMESPACE, "InvokerWebServicePort"), InvokerWebService.class, features);
    }

}
